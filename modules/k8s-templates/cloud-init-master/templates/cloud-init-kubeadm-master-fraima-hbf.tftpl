#cloud-config
version: v1

users:
  - name: ${ ssh_username }
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    shell: /bin/bash
    lock_passwd: true
    ssh_authorized_keys:
      - ${ ssh_key }

packages:
  - tree
  - socat 
  - conntrack
  - ethtool
  - nftables

disk_setup:
  /dev/disk/by-id/virtio-etcd-data:
    table_type: 'gpt'
    overwrite: true

fs_setup:
  - label: etcd_data
    filesystem: 'ext4'
    device: /dev/disk/by-id/virtio-etcd-data
    partition: auto
    overwrite: true

mounts:
  - [ "/dev/disk/by-id/virtio-etcd-data", "/var/lib/etcd"]

runcmd:
  - wget -O /usr/bin/hbf "https://storage.yandexcloud.net/m.images/fraimhbf/to-nft?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20230316%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20230316T162047Z&X-Amz-Expires=2592000&X-Amz-Signature=42551F34D67CD94F43E5CA5565E541FE9D7C3627D6537043A25CFAE7C581939E&X-Amz-SignedHeaders=host"
  - chmod +x /usr/bin/hbf
  - systemctl enable  hbf.service
  - systemctl start   hbf.service
  - sleep 15
  - mkdir -p /usr/bin/
  - chmod -R 700 /var/lib/etcd
  - mkdir -p /var/lib/key-keeper/vault
  - touch /var/lib/key-keeper/bootstrap.token
  - wget -O /usr/bin/fraimactl "https://storage.yandexcloud.net/m.images/fraimactl/fraimactl-FD-55-tests-v3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20230325%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20230325T174134Z&X-Amz-Expires=2592000&X-Amz-Signature=AB15A7216D64FEF315DBCC09D2D63F1225D535894A17D6649E52EFC94D564A1F&X-Amz-SignedHeaders=host"
  - chmod +x /usr/bin/fraimactl
  - fraimactl --config=/etc/kubernetes/fraimactl/config.yaml
  # - yc config profile create my-robot-profile
  # - yc config set cloud-id *
  # - yc config set folder-id *
  - export IAM_TOKEN=`yc iam create-token`
  - yc lockbox payload get --retry=200 --name=$(cat /proc/sys/kernel/hostname)-all-role-id   --key=$(cat /proc/sys/kernel/hostname)    > /var/lib/key-keeper/vault/all-role-id
  - yc lockbox payload get --retry=200 --name=$(cat /proc/sys/kernel/hostname)-all-secret-id --key=$(cat /proc/sys/kernel/hostname)    > /var/lib/key-keeper/vault/all-secret-id
  - systemctl enable  key-keeper.service
  - systemctl start   key-keeper.service
  - systemctl enable  systemd-resolved.service
  - systemctl start   systemd-resolved.service
  - until ls /etc/kubernetes/pki/ca/kubernetes-ca.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/ca/front-proxy-ca.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/ca/etcd-ca.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/ca/oidc-ca.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/etcd/etcd-peer-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/etcd/etcd-server-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/etcd/etcd-peer.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/etcd/etcd-server.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-scheduler/kube-scheduler-server.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-scheduler/kube-scheduler-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-scheduler/kube-scheduler-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-scheduler/kube-scheduler-server-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-etcd-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/front-proxy-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/front-proxy-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-sa.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-etcd-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-kubelet-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-kubelet-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kubeadm-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kubeadm-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-controller-manager/kube-controller-manager-server.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-controller-manager/kube-controller-manager-server-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-controller-manager/kube-controller-manager-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kube-controller-manager/kube-controller-manager-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kubelet/kubelet-client-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kubelet/kubelet-client.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kubelet/kubelet-server-key.pem; do sleep 1; done
  - until ls /etc/kubernetes/pki/certs/kubelet/kubelet-server.pem; do sleep 1; done
  - kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml



write_files:

####### Настройка key-keeper ###########################
###--->

  - path: /etc/systemd/system/key-keeper.service
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, key-keeper-service)}

  - path: ${base_local_path_certs}/vault-config
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, key-keeper-config)}

####### KUBECONFIGS для подключения к кластеру
  - path: ${main_path.base_kubernetes_path}/kube-scheduler/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-scheduler-kubeconfig)}

  - path: ${main_path.base_kubernetes_path}/kube-controller-manager/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-controller-manager-kubeconfig)}

  - path: /etc/kubernetes/admin.conf
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kube-apiserver-admin-kubeconfig)}

  - path: ${main_path.base_kubernetes_path}/kubelet/kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-kubeconfig)}

####### Настройка kubelet ##############################
###--->
  - path: ${main_path.base_kubernetes_path}/kubelet/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-config)}
###--->
####### *** ############################################


####### Статик поды для создания контрол плейна ########
###--->
  - path: ${base_path.base_static_pod_path}/etcd.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, static-pod-etcd)}

  - path: /etc/kubernetes/kubeadm/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, static-pod-kubeadm-config)}

###--->
####### *** ############################################    

####### Настройка cni ##############################
###--->
  - path: /etc/cni/net.d/99-loopback.conf
    owner: root:root
    permissions: '0644'
    content: |
      {
          "cniVersion": "0.4.0",
          "name": "lo",
          "type": "loopback"
      }
###--->
####### *** ############################################

  - path: /root/.bashrc
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, bashrc-k8s )}

  - path: ${main_path.base_kubernetes_path}/kube-apiserver/audit-policy.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
      - level: Metadata
      - level: RequestResponse

  - path: ${main_path.base_kubernetes_path}/fraimactl/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      - apiVersion: fraima.io/v1alpha
        kind: Containerd
        spec:
          service:
            extraArgs:
              # This document provides the description of the CRI plugin configuration. 
              # The CRI plugin config is part of the containerd config
              # Default: /etc/containerd/config.toml
              config: /etc/kubernetes/containerd/config.toml
          configuration:
            extraArgs:
              version: 2
              plugins:
                io.containerd.grpc.v1.cri:
                  containerd:
                    runtimes:
                      runc:
                        # Runtime v2 introduces a first class shim API for runtime authors to integrate with containerd. 
                        # The shim API is minimal and scoped to the execution lifecycle of a container.
                        runtime_type: "io.containerd.runc.v2"
                        options:
                          # While containerd and Kubernetes use the legacy cgroupfs driver for managing cgroups by default, 
                          # it is recommended to use the systemd driver on systemd-based hosts for compliance of the "single-writer" rule of cgroups. 
                          # To configure containerd to use the systemd driver, set the following option:
                          SystemdCgroup: true
          downloading:
            - name: cotainerd
              src: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz
              checkSum:
                src: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz.sha256sum
                type: "sha256"
              path: /usr/bin/
              owner: root:root
              permission: 0645
              unzip:
                status: true
                files: 
                  - bin/containerd
                  - bin/containerd-shim
                  - bin/containerd-shim-runc-v1
                  - bin/containerd-shim-runc-v2
                  - bin/containerd-stress
                  - bin/ctr

            - name: runc
              src: https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
              path: /usr/bin/
              owner: root:root
              permission: 0645
          starting:
            - systemctl enable containerd
            - systemctl start containerd


      - apiVersion: fraima.io/v1alpha
        kind: Kubelet
        spec:
          service:
            extraArgs:
              # Number for the log level verbosity
              v: 2
              # The directory where the TLS certs are located. 
              # If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored.
              # Default: /var/lib/kubelet/pki
              cert-dir: /etc/kubernetes/pki/certs/kubelet
              # The Kubelet will load its initial configuration from this file. 
              # The path may be absolute or relative; relative paths start at the Kubelet's current working directory. 
              # Omit this flag to use the built-in default configuration values. 
              # Command-line flags override configuration from this file.
              config: /etc/kubernetes/kubelet/config.yaml
              # Path to a kubeconfig file, specifying how to connect to the API server. 
              # Providing --kubeconfig enables API server mode, omitting --kubeconfig enables standalone mode.
              kubeconfig: /etc/kubernetes/kubelet/kubeconfig
              # Path to a kubeconfig file that will be used to get client certificate for kubelet. 
              # If the file specified by --kubeconfig does not exist, 
              # the bootstrap kubeconfig is used to request a client certificate from the API server. 
              # On success, a kubeconfig file referencing the generated client certificate and key is written to the path specified by --kubeconfig. 
              # The client certificate and key file will be stored in the directory pointed by --cert-dir.
              bootstrap-kubeconfig: /etc/kubernetes/kubelet/bootstrap-kubeconfig
              # The endpoint of remote runtime service. Unix Domain Sockets are supported on Linux, 
              # while npipe and tcp endpoints are supported on windows. 
              # Examples: unix:///path/to/runtime.sock, npipe:////./pipe/runtime.
              container-runtime-endpoint: /run/containerd/containerd.sock
              container-runtime: remote
              # Specified image will not be pruned by the image garbage collector. 
              # When container-runtime is set to docker, all containers in each pod will use the network/IPC namespaces from this image. 
              # Other CRI implementations have their own configuration to set this image.
              # Default: registry.k8s.io/pause:3.6
              pod-infra-container-image: k8s.gcr.io/pause:3.6
              # The provider for cloud services. Set to empty string for running with no cloud provider.
              # If set, the cloud provider determines the name of the node (consult cloud provider documentation to determine 
              # if and how the hostname is used). 
              # (DEPRECATED: will be removed in 1.24 or later, in favor of removing cloud provider code from Kubelet.)
              cloud-provider: external
          # configuration: {}
          downloading:
            - name: kubelet
              src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubelet
              checkSum:
                src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubelet.sha256"
                type: "sha256"
              path: /usr/bin/
              owner: root:root
              permission: 0645
          starting:
            - systemctl enable kubelet
            - systemctl start kubelet

      - apiVersion: fraima.io/v1alpha
        kind: Sysctl
        spec:
          configuration:
            extraArgs:
              net.ipv4.ip_forward: 1
          starting:
            - sudo sysctl --system

      - apiVersion: fraima.io/v1alpha
        kind: Modprob
        spec:
          configuration:
            extraArgs:
            - br_netfilter
            - overlay
          starting:
            - sudo modprobe overlay
            - sudo modprobe br_netfilter
            - sudo sysctl --system

      - apiVersion: fraima.io/v1alpha
        kind: Kubeadm
        spec:
          downloading:
            - name: kubeadm
              src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubeadm
              checkSum:
                src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubeadm.sha256"
                type: "sha256"
              path: /usr/bin/
              owner: root:root
              permission: 0645

      - apiVersion: fraima.io/v1alpha
        kind: Kubectl
        spec:
          downloading:
            - name: kubectl
              src: https://dl.k8s.io/release/v1.23.12/bin/linux/amd64/kubectl
              checkSum:
                src: "https://dl.k8s.io/v1.23.12/bin/linux/amd64/kubectl.sha256"
                type: "sha256"
              path: /usr/bin/
              owner: root:root
              permission: 0645


      - apiVersion: fraima.io/v1alpha
        kind: Crictl
        spec:
          downloading:
            - name: crictl
              src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.26.0/crictl-v1.26.0-linux-amd64.tar.gz
              path: /usr/bin/
              checkSum:
                src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.26.0/crictl-v1.26.0-linux-amd64.tar.gz.sha256
                type: "sha256"
              owner: root:root
              permission: 0645
              unzip:
                status: true
                files: 
                  - "crictl"

      - apiVersion: fraima.io/v1alpha
        kind: Etcdctl
        spec:
          downloading:
            - name: etcdctl
              src: https://github.com/etcd-io/etcd/releases/download/v3.5.5/etcd-v3.5.5-linux-amd64.tar.gz
              path: /usr/bin/
              owner: root:root
              permission: 0645
              unzip:
                status: true
                files: 
                  - "etcd-v3.5.5-linux-amd64/etcdctl"

      - apiVersion: fraima.io/v1alpha
        kind: KeyKeeper
        spec:
          downloading:
            - name: key-keeper
              src: "https://storage.yandexcloud.net/m.images/key-keeper-R3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20230325%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20230325T185921Z&X-Amz-Expires=2592000&X-Amz-Signature=54AB29B02D00B09D829F615708EC26556BBF94A2390B948926714A0E9348A044&X-Amz-SignedHeaders=host"
              path: /usr/bin/
              owner: root:root
              permission: 0645

      - apiVersion: fraima.io/v1alpha
        kind: YandexCloud
        spec:
          downloading:
            - name: yc
              src: "https://storage.yandexcloud.net/yandexcloud-yc/release/0.102.0/linux/amd64/yc"
              path: /usr/bin/
              owner: root:root
              permission: 0645


  - path: /etc/systemd/system/hbf.service
    owner: root:root
    permissions: '0644'
    content: |
      [Unit]
      Description=hbf

      Wants=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/usr/bin/hbf -config /etc/charlotte/config.yaml

      Restart=always
      StartLimitInterval=0
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
      
  - path: /etc/charlotte/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ---
      graceful-shutdown: 10s
      logger:
        level: INFO

      extapi:
        svc:
          def-daial-duration: 10s
          sgroups:
            dial-duration: 3s
            address: tcp://193.32.219.99:9000
            check-sync-status: 5s
