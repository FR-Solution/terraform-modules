# #cloud-config
# version: v1

# hostname: ${hostname}
# users:
#   - name: dkot
#     sudo: ALL=(ALL) NOPASSWD:ALL
#     groups: users, admin
#     shell: /bin/bash
#     lock_passwd: true
#     ssh_authorized_keys:
#       - ${ ssh_key }

# packages:
#   - wget
#   - jq
#   - tree
#   - irqbalance
#   - net-tools
#   - socat 
#   - conntrack
#   - ipset
#   - ethtool
#   - unzip
#   - xfsprogs

# # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
# bootcmd:
#   - sudo modprobe overlay
#   - sudo modprobe br_netfilter
#   - sudo sysctl --system

# # Проверялось только для Yandex Cloud
# # device_aliases: {'etcd-data': '/dev/disk/by-id/virtio-etcd-data'}

# disk_setup:
#   /dev/disk/by-id/virtio-etcd-data:
#     table_type: 'gpt'
#     overwrite: true

# fs_setup:
#   - label: etcd_data
#     filesystem: 'ext4'
#     device: /dev/disk/by-id/virtio-etcd-data
#     partition: auto
#     overwrite: true

# ### TODO 
# ### {"level":"warn","ts":"2022-10-17T00:44:38.354Z","caller":"etcdmain/etcd.go:446","msg":"found invalid file under data directory","filename":"lost+found","data-dir":"/var/lib/etcd"}
# ### {"level":"warn","ts":"2022-10-17T00:44:38.354Z","caller":"embed/config.go:848","msg":"ignoring peer auto TLS since certs given"}
# ### {"level":"warn","ts":1665967478.3572063,"caller":"fileutil/fileutil.go:57","msg":"check file permission","error":"directory \"/var/lib/etcd\" exist, but the permission is \"drwxr-xr-x\". The recommended permission is \"-rwx------\" to prevent possible unprivileged access to the data"}

# mounts:
#   - [ "/dev/disk/by-id/virtio-etcd-data", "/var/lib/etcd"]


# runcmd:
#   # Скачивание базовых бинарей для сетапа кластера
#   - chmod -R 700 /var/lib/etcd
#   - wget -O /usr/bin/key-keeper   "https://storage.yandexcloud.net/m.images/key-keeper-T2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20221020%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20221020T123413Z&X-Amz-Expires=2592000&X-Amz-Signature=138701723B70343E38D82791A28AD1DB87040677F7C94D83610FF26ED9AF1954&X-Amz-SignedHeaders=host"
#   - wget -O /usr/bin/kubectl       ${release-vars[actual-release].kubectl.url}
#   - wget -O /usr/bin/kubelet       ${release-vars[actual-release].kubelet.url}
#   - wget -O /usr/bin/runc          ${release-vars[actual-release].runc.url}
#   - wget -O /tmp/etcd.tar.gz       https://github.com/etcd-io/etcd/releases/download/v3.5.5/etcd-v3.5.5-linux-amd64.tar.gz
#   - wget -O /tmp/cni.tar.gz        ${release-vars[actual-release].cni.url}
#   - wget -O /tmp/containerd.tar.gz ${release-vars[actual-release].containerd.url}
#   - wget -O /tmp/crictl.tar.gz     ${release-vars[actual-release].crictl.url}
#   # Раскидывание бинарей по диррректориям
#   - chmod +x /usr/bin/key-keeper 
#   - chmod +x /usr/bin/kubelet 
#   - chmod +x /usr/bin/kubectl 
#   - chmod +x /usr/bin/runc
#   - mkdir -p /opt/cni/bin
#   - mkdir -p /tmp/containerd
#   - mkdir -p /tmp/etcd
#   - tar -C "/tmp/etcd"        -xvf /tmp/etcd.tar.gz
#   - tar -C "/tmp/containerd"  -xvf /tmp/containerd.tar.gz
#   - tar -C "/opt/cni/bin"     -xvf /tmp/cni.tar.gz
#   - tar -C "/usr/bin"         -xvf /tmp/crictl.tar.gz
#   - cp /tmp/etcd/etcd*/etcdctl /usr/bin/
#   - cp /tmp/containerd/bin/*   /usr/bin/
#   # Старт всех сервисов и автозапуск при старте системы
#   - systemctl daemon-reload
#   - systemctl enable  kubelet.service
#   - systemctl enable  containerd.service
#   - systemctl start   kubelet.service
#   - systemctl start   containerd.service
#   - systemctl enable  key-keeper.service
#   - systemctl start   key-keeper.service
#   # Fix kubelet.config:resolvConf
#   - systemctl enable  systemd-resolved.service
#   - systemctl start   systemd-resolved.service

write_files:

####### Настройка key-keeper ###########################
###--->
  # - path: /etc/systemd/system/key-keeper.service
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, key-keeper-service)}

  # - path: ${base_local_path_certs}/vault-config
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, key_keeper_config)}

  # - path: /var/lib/key-keeper/bootstrap.token
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, bootstrap_token_all)}

###--->
####### *** ############################################

####### Настройка kubelet ##############################
###--->
  # - path: /etc/systemd/system/kubelet.service
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kubelet-service)}

  # - path: ${base_path.kubernetes_path}/kubelet/service/kubelet-args.env
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kubelet-service-args)}

  # - path: ${base_path.kubernetes_path}/kubelet/config.yaml
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kubelet-config)}

  # - path: /etc/systemd/system/kubelet.service.d/10-fraima.conf
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kubelet-service-d-fraima)}
###--->
####### *** ############################################

####### Настройка containerd ##############################
###--->
  # - path: /etc/systemd/system/containerd.service
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, containerd-service )}
###--->
####### *** ############################################

####### Настройка cni ##############################
###--->
  # - path: /etc/cni/net.d/99-loopback.conf
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, base-cni )}
###--->
####### *** ############################################

####### Настройка sysctl ##############################
###--->
  # - path: /etc/sysctl.d/99-network.conf
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, sysctl-network )}
###--->
####### *** ############################################

####### Настройка modprobe ##############################
###--->
  # - path: /etc/modules-load.d/k8s.conf
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, modules-load-k8s )}
###--->
####### *** ############################################



####### Статик поды для создания контрол плейна ########
###--->
  # - path: ${base_path.static_pod_path}/etcd.yaml
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, etcd-manifest)}

  # - path: ${base_path.static_pod_path}/kube-apiserver.yaml
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kube-apiserver-manifest)}

  # - path: ${base_path.static_pod_path}/kube-controller-manager.yaml
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kube-controller-manager-manifest)}

  # - path: ${base_path.static_pod_path}/kube-scheduler.yaml
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     ${indent(6, kube-scheduler-manifest)}


# ####### KUBECONFIGS для подключения к кластеру
#   - path: ${base_path.kubernetes_path}/kube-scheduler/kubeconfig
#     owner: root:root
#     permissions: '0644'
#     content: |
#       ---
#       apiVersion: v1
#       clusters:
#       - cluster:
#           certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
#           #server: https://${kube_apiserver_lb_fqdn}:${kube_apiserver_port_lb}
#           server: https://127.0.0.1:443
#         name: kubernetes
#       contexts:
#       - context:
#           cluster: kubernetes
#           namespace: default
#           user: kube-scheduler
#         name: kube-scheduler@kubernetes
#       current-context: kube-scheduler@kubernetes
#       kind: Config
#       preferences: {}
#       users:
#       - name: kube-scheduler
#         user:
#           client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-scheduler-client"].certificates["kube-scheduler-client"].key-keeper-args.host_path}/kube-scheduler-client.pem
#           client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-scheduler-client"].certificates["kube-scheduler-client"].key-keeper-args.host_path}/kube-scheduler-client-key.pem

#   - path: ${base_path.kubernetes_path}/kube-controller-manager/kubeconfig
#     owner: root:root
#     permissions: '0644'
#     content: |
#       ---
#       apiVersion: v1
#       clusters:
#       - cluster:
#           certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
#           #server: https://${kube_apiserver_lb_fqdn}:${kube_apiserver_port_lb}
#           server: https://127.0.0.1:443
#         name: kubernetes
#       contexts:
#       - context:
#           cluster: kubernetes
#           namespace: default
#           user: kube-controller-manager
#         name: kube-controller-manager@kubernetes
#       current-context: kube-controller-manager@kubernetes
#       kind: Config
#       preferences: {}
#       users:
#       - name: kube-controller-manager
#         user:
#           client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-controller-manager-client"].certificates["kube-controller-manager-client"].key-keeper-args.host_path}/kube-controller-manager-client.pem
#           client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-controller-manager-client"].certificates["kube-controller-manager-client"].key-keeper-args.host_path}/kube-controller-manager-client-key.pem

#   - path: ${base_path.kubernetes_path}/kube-apiserver/kubeconfig
#     owner: root:root
#     permissions: '0644'
#     content: |
#       ---
#       apiVersion: v1
#       clusters:
#       - cluster:
#           certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
#           #server: https://${kube_apiserver_lb_fqdn}:${kube_apiserver_port_lb}
#           server: https://127.0.0.1:443
#         name: kubernetes
#       contexts:
#       - context:
#           cluster: kubernetes
#           namespace: default
#           user: kube-apiserver
#         name: kube-apiserver@kubernetes
#       current-context: kube-apiserver@kubernetes
#       kind: Config
#       preferences: {}
#       users:
#       - name: kube-apiserver
#         user:
#           client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kube-apiserver-kubelet-client"].certificates["kube-apiserver-kubelet-client"].key-keeper-args.host_path}/kube-apiserver-kubelet-client.pem
#           client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kube-apiserver-kubelet-client"].certificates["kube-apiserver-kubelet-client"].key-keeper-args.host_path}/kube-apiserver-kubelet-client-key.pem

#   - path: ${base_path.kubernetes_path}/kubelet/kubeconfig
#     owner: root:root
#     permissions: '0644'
#     content: |
#       ---
#       apiVersion: v1
#       clusters:
#       - cluster:
#           certificate-authority: ${ssl.intermediate["kubernetes-ca"].host_path}/kubernetes-ca.pem
#           #server: https://${kube_apiserver_lb_fqdn}:${kube_apiserver_port_lb}
#           server: https://127.0.0.1:443
#         name: kubernetes
#       contexts:
#       - context:
#           cluster: kubernetes
#           namespace: default
#           user: kubelet
#         name: kubelet@kubernetes
#       current-context: kubelet@kubernetes
#       kind: Config
#       preferences: {}
#       users:
#       - name: kubelet
#         user:
#           client-certificate: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-client"].certificates["kubelet-client"].key-keeper-args.host_path}/kubelet-client.pem
#           client-key: ${ssl.intermediate["kubernetes-ca"].issuers["kubelet-client"].certificates["kubelet-client"].key-keeper-args.host_path}/kubelet-client-key.pem

####### Второстепенная настройка
  - path: ${base_path.kubernetes_path}/kube-apiserver/audit-policy.yaml
    owner: root:root
    permissions: '0644'
    content: |
---
apiVersion: audit.k8s.io/v1
kind: Policy
rules:
- level: Metadata
- level: RequestResponse


  # - path: /root/.bashrc
  #   owner: root:root
  #   permissions: '0644'
  #   content: |
  #     # .bashrc

  #     # User specific aliases and functions

  #     PROMPT_COMMAND='history -a'
  #     export HISTCONTROL="ignoreboth"
  #     export HISTIGNORE=""
  #     shopt -s cmdhist

  #     alias rm='rm -i'
  #     alias cp='cp -i'
  #     alias mv='mv -i'

  #     alias kg='kubectl get'
  #     alias ka='kubectl apply'
  #     alias kd='kubectl delete'
  #     alias ki='kubectl describe'
  #     alias ke='kubectl edit'
  #     alias k='kubectl '
  #     alias kl='kubectl logs '

  #     alias crictl='crictl  --runtime-endpoint unix:///run/containerd/containerd.sock '

  #     new_kubeconfig () {
  #       SRC_SSH_PORT=$(env | grep SSH_CONNECTION | awk '{print $2}')
  #       cp -uf ${base_path.kubernetes_path}/kube-apiserver/kubeconfig /tmp/kubeconfig
  #       export KUBECONFIG=/tmp/kubeconfig
  #     }
  #     new_kubeconfig

  #     kns () {
  #       kubectl config set-context --current --namespace=$1
  #     }


  #     export ETCDCTL_CERT=${ssl.intermediate["etcd-ca"].issuers["etcd-client"].certificates["kube-apiserver-etcd-client"].key-keeper-args.host_path}/kube-apiserver-etcd-client.pem \
  #     export ETCDCTL_KEY=${ssl.intermediate["etcd-ca"].issuers["etcd-client"].certificates["kube-apiserver-etcd-client"].key-keeper-args.host_path}/kube-apiserver-etcd-client-key.pem \
  #     export ETCDCTL_CACERT=${ssl.intermediate["etcd-ca"].host_path}/etcd-ca.pem \

  #     etcd_endpoints () {
  #       export ENDPOINTS=$(echo $(ENDPOINTS=127.0.0.1:2379
  #       etcdctl \
  #       --endpoints=$ENDPOINTS \
  #       member list |
  #       awk '{print $5}' |
  #       sed "s/,//") | sed "s/ /,/g")
  #     }

  #     etcd_endpoints

  #     estat () {
  #       etcdctl \
  #       --write-out=table \
  #       --endpoints=$ENDPOINTS \
  #       endpoint status
  #     }

  #     # Source global definitions
  #     if [ -f /etc/bashrc ]; then
  #             . /etc/bashrc
  #     fi

