---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-scheduler
    tier: control-plane
  name: kube-scheduler
  namespace: kube-system
spec:
  containers:
  - name: kube-scheduler
    command:
    - kube-scheduler
    args:
    %{~ for intermediate_name, intermediate_content in ssl.intermediate ~}
      %{~ if  try(intermediate_content.labels.static-pod-kube-scheduler-args, {}) != {} ~}
        %{~ for key, value in intermediate_content.labels.static-pod-kube-scheduler-args ~}
          %{~ if value == "cert-public-arg" ~}
      - --${key}=${intermediate_content.host_path}/${intermediate_name}.pem
          %{~ endif ~}
          %{~ if value == "cert-private-arg" ~}
      - --${key}=${intermediate_content.host_path}/${intermediate_name}-key.pem
          %{~ endif ~}
        %{~ endfor ~}
      %{~ endif ~}
      %{~ for issuer_name, issuer_content in intermediate_content.issuers ~}
        %{~ for certificate_name, certificate_content in issuer_content.certificates ~}
          %{~ if  try(certificate_content.labels.static-pod-kube-scheduler-args, {}) != {} ~}
            %{~ for key, value in certificate_content.labels.static-pod-kube-scheduler-args ~}
              %{~ if value == "cert-public-arg" ~}
      - --${key}=${certificate_content.key-keeper-args.host_path}/${certificate_name}.pem
              %{~ endif ~}
              %{~ if value == "cert-private-arg" ~}
      - --${key}=${certificate_content.key-keeper-args.host_path}/${certificate_name}-key.pem
              %{~ endif ~}
            %{~ endfor ~}
          %{~ endif ~}
        %{~ endfor ~}
      %{~ endfor ~}
    %{~ endfor ~}
      - --authentication-kubeconfig=${base_path.base_kubernetes_path}/kube-scheduler/kubeconfig 
      - --authorization-kubeconfig=${base_path.base_kubernetes_path}/kube-scheduler/kubeconfig 
      - --kubeconfig=${base_path.base_kubernetes_path}/kube-scheduler/kubeconfig 
      - --bind-address=0.0.0.0
      - --leader-elect=true
      - --secure-port=10259
    image: ${kube_scheduler_image}:${kube_scheduler_version}
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 100m
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10259
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10259
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: ${base_path.base_kubernetes_path}/kube-scheduler
      name: k8s-kube-scheduler-configs
      readOnly: true
    - mountPath: ${base_path.base_local_path_certs}/certs
      name: k8s-certs
      readOnly: true
    - mountPath: ${base_path.base_local_path_certs}/ca
      name: k8s-ca
      readOnly: true
  hostNetwork: true
  priorityClassName: system-node-critical
  securityContext:
      seccompProfile:
        type: RuntimeDefault 
  volumes:
  - hostPath:
      path: ${base_path.base_kubernetes_path}/kube-scheduler
      type: DirectoryOrCreate
    name: k8s-kube-scheduler-configs
  - hostPath:
      path: ${base_path.base_local_path_certs}/certs
      type: DirectoryOrCreate
    name: k8s-certs
  - hostPath:
      path: ${base_path.base_local_path_certs}/ca
      type: DirectoryOrCreate
    name: k8s-ca
status: {}
