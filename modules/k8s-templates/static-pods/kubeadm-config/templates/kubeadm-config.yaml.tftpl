apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
skipPhases:
  #- preflight
  - certs
  - kubeconfig
  - kubelet-start
  - etcd
  - upload-certs
  - kubelet-finalize
  - addon
  - bootstrap-token

nodeRegistration:
  ignorePreflightErrors:
    - ExternalEtcdVersion
    - Port-10250
    - FileAvailable--etc-kubernetes-manifests-etcd.yaml
    - FileExisting-iptables
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
networking:
  serviceSubnet: "${service_cidr}"
  dnsDomain: "cluster.local"
kubernetesVersion: "${component_versions.kubernetes_version}"
imageRepository: "${component_versions.image_repository}"
controlPlaneEndpoint: "${kube_api_fqdn}:${kube_apiserver_port}"
etcd:
  external:
    endpoints:
    %{~ for etcd in  etcd_list_servers ~}
    - "${etcd}"
    %{~ endfor ~}
    "caFile": "/etc/kubernetes/pki/ca/etcd-ca.pem"
    "certFile": "/etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-etcd-client.pem"
    "keyFile": "/etc/kubernetes/pki/certs/kube-apiserver/kube-apiserver-etcd-client-key.pem"
apiServer:
  extraArgs:
  %{~ for intermediate_name, intermediate_content in ssl.intermediate ~}
    %{~ if  try(intermediate_content.labels.static-pod-kube-apiserver-args, {}) != {} ~}
      %{~ for key, value in intermediate_content.labels.static-pod-kube-apiserver-args ~}
        %{~ if value == "cert-public-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}.pem"
        %{~ endif ~}
        %{~ if value == "cert-private-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}-key.pem"
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endif ~}
    %{~ for issuer_name, issuer_content in intermediate_content.issuers ~}
      %{~ for certificate_name, certificate_content in issuer_content.certificates ~}
        %{~ if  try(certificate_content.labels.static-pod-kube-apiserver-args, {}) != {} ~}
          %{~ for key, value in certificate_content.labels.static-pod-kube-apiserver-args ~}
            %{~ if value == "cert-public-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}.pem"
            %{~ endif ~}
            %{~ if value == "cert-private-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}-key.pem"
            %{~ endif ~}
          %{~ endfor ~}
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endfor ~}
  %{~ endfor ~}
    "service-account-key-file": "${secrets["kube-apiserver-sa"].keys["public"].host_path}"
    "service-account-signing-key-file": "${secrets["kube-apiserver-sa"].keys["private"].host_path}"
    "audit-log-path": "/var/log/kubernetes/audit/audit.log"
    "audit-policy-file": "${main_path.base_kubernetes_path}/kube-apiserver/audit-policy.yaml"
    "oidc-ca-file": "${base_path.base_local_path_certs}/ca/oidc-ca.pem"

    ${indent(4,kube_flags.kube_apiserver_flags)}

  extraVolumes:
  - name: "k8s-ca"
    hostPath: "${base_path.base_local_path_certs}/ca"
    mountPath: "${base_path.base_local_path_certs}/ca"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-certs"
    hostPath: "${base_path.base_local_path_certs}/certs"
    mountPath: "${base_path.base_local_path_certs}/certs"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-kube-apiserver-configs"
    hostPath: "${main_path.base_kubernetes_path}/kube-apiserver"
    mountPath: "${main_path.base_kubernetes_path}/kube-apiserver"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-audit"
    hostPath: "/var/log/kubernetes/audit/"
    mountPath: "/var/log/kubernetes/audit/"
    readOnly: false
    pathType: DirectoryOrCreate

controllerManager:
  extraArgs:
  %{~ for intermediate_name, intermediate_content in ssl.intermediate ~}
    %{~ if  try(intermediate_content.labels.static-pod-kube-controller-manager-args, {}) != {} ~}
      %{~ for key, value in intermediate_content.labels.static-pod-kube-controller-manager-args ~}
        %{~ if value == "cert-public-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}.pem"
        %{~ endif ~}
        %{~ if value == "cert-private-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}-key.pem"
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endif ~}
    %{~ for issuer_name, issuer_content in intermediate_content.issuers ~}
      %{~ for certificate_name, certificate_content in issuer_content.certificates ~}
        %{~ if  try(certificate_content.labels.static-pod-kube-controller-manager-args, {}) != {} ~}
          %{~ for key, value in certificate_content.labels.static-pod-kube-controller-manager-args ~}
            %{~ if value == "cert-public-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}.pem"
            %{~ endif ~}
            %{~ if value == "cert-private-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}-key.pem"
            %{~ endif ~}
          %{~ endfor ~}
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endfor ~}
  %{~ endfor ~}
    "service-account-private-key-file": "${secrets["kube-apiserver-sa"].keys["private"].host_path}"
    "cluster-signing-key-file": ""
    "kubeconfig": "${main_path.base_kubernetes_path}/kube-controller-manager/kubeconfig" 
    "authentication-kubeconfig": "${main_path.base_kubernetes_path}/kube-controller-manager/kubeconfig" 
    "authorization-kubeconfig": "${main_path.base_kubernetes_path}/kube-controller-manager/kubeconfig"

    ${indent(4,kube_flags.kube_controller_manager_flags)}

  extraVolumes:
  # TODO донт ворк
  #- name: kubeconfig

  - name: "k8s-ca"
    hostPath: "${base_path.base_local_path_certs}/ca"
    mountPath: "${base_path.base_local_path_certs}/ca"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-certs"
    hostPath: "${base_path.base_local_path_certs}/certs"
    mountPath: "${base_path.base_local_path_certs}/certs"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-kube-controller-manager-configs"
    hostPath: "${main_path.base_kubernetes_path}/kube-controller-manager"
    mountPath: "${main_path.base_kubernetes_path}/kube-controller-manager"
    readOnly: true
    pathType: DirectoryOrCreate

scheduler:
  extraArgs:
  %{~ for intermediate_name, intermediate_content in ssl.intermediate ~}
    %{~ if  try(intermediate_content.labels.static-pod-kube-scheduler-args, {}) != {} ~}
      %{~ for key, value in intermediate_content.labels.static-pod-kube-scheduler-args ~}
        %{~ if value == "cert-public-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}.pem"
        %{~ endif ~}
        %{~ if value == "cert-private-arg" ~}
    "${key}": "${intermediate_content.host_path}/${intermediate_name}-key.pem"
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endif ~}
    %{~ for issuer_name, issuer_content in intermediate_content.issuers ~}
      %{~ for certificate_name, certificate_content in issuer_content.certificates ~}
        %{~ if  try(certificate_content.labels.static-pod-kube-scheduler-args, {}) != {} ~}
          %{~ for key, value in certificate_content.labels.static-pod-kube-scheduler-args ~}
            %{~ if value == "cert-public-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}.pem"
            %{~ endif ~}
            %{~ if value == "cert-private-arg" ~}
    "${key}": "${certificate_content.key-keeper-args.host_path}/${certificate_name}-key.pem"
            %{~ endif ~}
          %{~ endfor ~}
        %{~ endif ~}
      %{~ endfor ~}
    %{~ endfor ~}
  %{~ endfor ~}
    "authentication-kubeconfig": "${main_path.base_kubernetes_path}/kube-scheduler/kubeconfig" 
    "authorization-kubeconfig": "${main_path.base_kubernetes_path}/kube-scheduler/kubeconfig" 
    "kubeconfig": "${main_path.base_kubernetes_path}/kube-scheduler/kubeconfig" 

    ${indent(4,kube_flags.kube_scheduler_flags)}

  extraVolumes:
  # TODO донт ворк
  #- name: kubeconfig

  - name: "k8s-ca"
    hostPath: "${base_path.base_local_path_certs}/ca"
    mountPath: "${base_path.base_local_path_certs}/ca"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-certs"
    hostPath: "${base_path.base_local_path_certs}/certs"
    mountPath: "${base_path.base_local_path_certs}/certs"
    readOnly: true
    pathType: DirectoryOrCreate

  - name: "k8s-kube-scheduler-configs"
    hostPath: "${main_path.base_kubernetes_path}/kube-scheduler"
    mountPath: "${main_path.base_kubernetes_path}/kube-scheduler"
    readOnly: true
    pathType: DirectoryOrCreate
