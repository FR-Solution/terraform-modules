---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: etcd
    tier: control-plane
  name: etcd
  namespace: kube-system
spec:
  containers:
  - name: etcd
    command:
      - etcd
    args:
      - --discovery-srv=${discovery_srv}
      - --name=${full_instance_name}
      - --initial-advertise-peer-urls=https://${full_instance_name}:${etcd_peer_port}
      - --advertise-client-urls=https://${full_instance_name}:${etcd_server_port}
    %{~ for intermediate_name, intermediate_content in ssl.intermediate ~}
      %{~ if  try(intermediate_content.labels.static-pod-etcd-args, {}) != {} ~}
        %{~ for key, value in intermediate_content.labels.static-pod-etcd-args ~}
          %{~ if value == "cert-public-arg" ~}
      - --${key}=${intermediate_content.host_path}/${intermediate_name}.pem
          %{~ endif ~}
          %{~ if value == "cert-private-arg" ~}
      - --${key}=${intermediate_content.host_path}/${intermediate_name}-key.pem
          %{~ endif ~}
        %{~ endfor ~}
      %{~ endif ~}
      %{~ for issuer_name, issuer_content in intermediate_content.issuers ~}
        %{~ for certificate_name, certificate_content in issuer_content.certificates ~}
          %{~ if  try(certificate_content.labels.static-pod-etcd-args, {}) != {} ~}
            %{~ for key, value in certificate_content.labels.static-pod-etcd-args ~}
              %{~ if value == "cert-public-arg" ~}
      - --${key}=${certificate_content.key-keeper-args.host_path}/${certificate_name}.pem
              %{~ endif ~}
              %{~ if value == "cert-private-arg" ~}
      - --${key}=${certificate_content.key-keeper-args.host_path}/${certificate_name}-key.pem
              %{~ endif ~}
            %{~ endfor ~}
          %{~ endif ~}
        %{~ endfor ~}
      %{~ endfor ~}
    %{~ endfor ~}
      - --listen-client-urls=https://0.0.0.0:${etcd_server_port},https://0.0.0.0:${etcd_server_port_target_lb}
      - --listen-peer-urls=https://0.0.0.0:${etcd_peer_port}
      - --listen-metrics-urls=http://0.0.0.0:${etcd_metrics_port}
      - --initial-cluster-token=etcd
      - --initial-cluster-state=new
      - --data-dir=${data_dir}
      - --strict-reconfig-check=true
      - --peer-client-cert-auth=true
      - --peer-auto-tls=true
      - --client-cert-auth=true
      - --snapshot-count=10000
      - --heartbeat-interval=250
      - --election-timeout=1500
      - --quota-backend-bytes=0
      - --max-snapshots=10
      - --max-wals=10
      - --discovery-fallback=proxy
      - --auto-compaction-retention=8
      - --force-new-cluster=false
      - --enable-v2=false
      - --proxy=off
      - --proxy-failure-wait=5000
      - --proxy-refresh-interval=30000
      - --proxy-dial-timeout=1000
      - --proxy-write-timeout=5000
      - --proxy-read-timeout=0
      - --metrics=extensive
      - --logger=zap
    image: ${etcd_image}:${etcd_version}
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: 127.0.0.1
        path: /health
        port: ${etcd_metrics_port}
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: 127.0.0.1
        path: /health
        port: ${etcd_metrics_port}
        scheme: HTTP
    volumeMounts:
    - mountPath: /var/lib/etcd
      name: etcd-data
    - mountPath: ${base_local_path_certs}/certs/etcd
      name: etcd-certs
    - mountPath: ${base_local_path_certs}/ca
      name: ca
  hostNetwork: true
  priorityClassName: system-node-critical
  securityContext:
      null
  volumes:
  - hostPath:
      path: ${base_local_path_certs}/certs/etcd
      type: DirectoryOrCreate
    name: etcd-certs
  - hostPath:
      path: ${base_local_path_certs}/ca
      type: DirectoryOrCreate
    name: ca
  - hostPath:
      path: /var/lib/etcd
      type: DirectoryOrCreate
    name: etcd-data
status: {}
