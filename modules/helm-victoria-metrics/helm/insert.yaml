apiVersion: operator.victoriametrics.com/v1beta1
kind: VMCluster
metadata:
  name: vm-vmcluster-persistent
  namespace: kube-fraima-monitoring
spec:
  # Add fields here
  retentionPeriod: "1"
  replicationFactor: 2
  vmstorage:
    replicaCount: 4
    storageDataPath: "/vm-data"
    podMetadata:
      labels:
        owner: fraima
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
      runAsGroup: 1000
    podDisruptionBudget:
       maxUnavailable: 1
    topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
    nodeSelector:
      node-role.kubernetes.io/monitoring: ""
    # affinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #         - key: "app.kubernetes.io/name"
    #           operator: In
    #           values:
    #           - "vmstorage"
    #       topologyKey: "kubernetes.io/hostname"
    # storage:
    #   volumeClaimTemplate:
    #     spec:
    #       accessModes:
    #         - ReadWriteOnce
    #       resources:
    #         requests:
    #           storage: 2Gi
    #       persistentVolumeReclaimPolicy: Retain
    #       storageClassName: yc-network-hdd
    resources:
      requests:
        cpu: 250m
        memory: 500Mi
      limits:
        cpu: 1000m
        memory: 1500Mi
  vmselect:
    cacheMountPath: "/select-cache"
    replicaCount: 2
    podMetadata:
      labels:
        owner: fraima
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
      runAsGroup: 1000
    podDisruptionBudget:
       maxUnavailable: 1
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
    # affinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #         - key: "app.kubernetes.io/name"
    #           operator: In
    #           values:
    #           - "vmselect"
    #       topologyKey: "kubernetes.io/hostname"
    nodeSelector:
      node-role.kubernetes.io/monitoring: ""
    resources:
      requests:
        cpu: 150m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 1024Mi
    # storage:
    #   volumeClaimTemplate:
    #     spec:
    #       accessModes:
    #         - ReadWriteOnce
    #       resources:
    #         requests:
    #           storage: 2Gi
    #       persistentVolumeReclaimPolicy: Retain
    #       storageClassName: yc-network-hdd
  vminsert:
    replicaCount: 2
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
      runAsGroup: 1000
    podDisruptionBudget:
       maxUnavailable: 1
    podMetadata:
      labels:
        owner: fraima
    topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
    # affinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #         - key: "app.kubernetes.io/name"
    #           operator: In
    #           values:
    #           - "vminsert"
    #       topologyKey: "kubernetes.io/hostname"
    nodeSelector:
      node-role.kubernetes.io/monitoring: ""
    resources:
      requests:
        cpu: 150m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 1024Mi
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAgent
metadata:
  name: vm-agent
  namespace: kube-fraima-monitoring
spec:
  replicaCount: 2
  podMetadata:
    labels:
      owner: fraima
  statefulStorage:
    emptyDir:
      medium: ""
      sizeLimit: 1Gi
    # volumeClaimTemplate:
    #   spec:
    #     accessModes:
    #       - ReadWriteOnce
    #     resources:
    #       requests:
    #         storage: 2Gi
    #     persistentVolumeReclaimPolicy: Retain
    #     storageClassName: yc-network-hdd
  containers:
  - name: config-reloader
    resources:

      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 50m
        memory: 64Mi
  podScrapeNamespaceSelector: {}
  podScrapeSelector: {}
  serviceScrapeSelector: {}
  nodeScrapeSelector: {}
  nodeScrapeNamespaceSelector: {}
  staticScrapeSelector: {}
  staticScrapeNamespaceSelector: {}
  remoteWrite:
    - url: "http://vminsert-vm-vmcluster-persistent.kube-fraima-monitoring.svc.cluster.local.:8480/insert/0/prometheus/api/v1/write"
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  selectAllByDefault: true
  scrapeInterval: 30s
  topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
  # affinity:
  #   podAntiAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchExpressions:
  #         - key: "app.kubernetes.io/name"
  #           operator: In
  #           values:
  #           - "vmagent"
  #       topologyKey: "kubernetes.io/hostname"
  nodeSelector:
    node-role.kubernetes.io/monitoring: ""
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAuth
metadata:
  name: vmauth
  namespace: kube-fraima-monitoring
spec:
  replicaCount: 2
  podMetadata:
    labels:
      owner: fraima
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
  # affinity:
  #   podAntiAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchExpressions:
  #         - key: "app.kubernetes.io/name"
  #           operator: In
  #           values:
  #           - "vmauth"
  #       topologyKey: "kubernetes.io/hostname"
  nodeSelector:
    node-role.kubernetes.io/monitoring: ""
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    runAsGroup: 1000
  # ingress:
  #   name: "vmauth"
  #   host: ""
  #   labels: {}  
  #   annotations: {}
  #   class_name: ""
  #   tlsHosts: {} # <[]string> TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.
  #   extraRules: []  #  <[]Object> ExtraRules - additional rules for ingress, must be checked for correctness by user.
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAlert
metadata:
  name: vmalert
  namespace: kube-fraima-monitoring
spec:
  replicaCount: 2
  podMetadata:
    labels:
      owner: fraima
  datasource:
    url: http://http://vmselect-vm-vmcluster-persistent.kube-fraima-monitoring.svc.cluster.local.:8481/select/0/prometheus
  notifier:
    url: http://vmalertmanager.kube-fraima-monitoring.svc.cluster.local.:9093
  remoteRead:
    url: http://http://vmselect-vm-vmcluster-persistent.kube-fraima-monitoring.svc.cluster.local.:8481/select/0/prometheus
  remoteWrite:
    url: http://http://vminsert-vm-vmcluster-persistent.kube-fraima-monitoring.svc.cluster.local.:8480/insert/0/prometheu
  evaluationInterval: "30s"
  ruleNamespaceSelector: {}
  ruleSelector: {}
  logFormat: json
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 256Mi
  containers:
  - name: config-reloader
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 100m
        memory: 64Mi
  topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule

  nodeSelector:
    node-role.kubernetes.io/monitoring: ""
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    runAsGroup: 1000
---
apiVersion: v1
kind: Secret
metadata:
  name: vmalertmanager-secret

  namespace: kube-fraima-monitoring
  labels:
    app: vm-operator
type: Opaque
stringData:
  alertmanager.yaml: |
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'webhook'
    receivers:
      - name: 'webhook'
        webhook_configs:
          - url: 'http://alertmanager:30500/'
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAlertmanager
metadata:
  name: vmalertmanager
  namespace: kube-fraima-monitoring
  labels:
   usage: dedicated
spec:
  replicaCount: 2
  podMetadata:
    labels:
      owner: fraima
  configSecret: vmalertmanager-secret
  configSelector: {}
  configNamespaceSelector: {}
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    runAsGroup: 1000
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 256Mi
  topologySpreadConstraints:
    - maxSkew: 2
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule

  nodeSelector:
    node-role.kubernetes.io/monitoring: ""
