#cloud-config
version: v1

hostname: ${hostname}
users:
  - name: dkot
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    shell: /bin/bash
    lock_passwd: true
    ssh_authorized_keys:
      - ${ ssh_key }

packages:
  - wget
  - jq
  - tree
  - irqbalance
  - net-tools
  - socat 
  - conntrack
  - ipset
  - ethtool
  - unzip

# https://kubernetes.io/docs/setup/production-environment/container-runtimes/
bootcmd:
  - sudo modprobe overlay
  - sudo modprobe br_netfilter
  - sudo sysctl --system

runcmd:
  - wget -O /usr/bin/key-keeper   "https://storage.yandexcloud.net/m.images/key-keeper-dd15?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=YCAJEhOlYpv1GRY7hghCojNX5%2F20221010%2Fru-central1%2Fs3%2Faws4_request&X-Amz-Date=20221010T142930Z&X-Amz-Expires=2592000&X-Amz-Signature=9BDB6EF39A35FAE2AEDA145D7138962C9A41C64DB668FF3D999F706E764F4909&X-Amz-SignedHeaders=host"
  # Скачивание базовых бинарей для сетапа кластера
  - wget -O /usr/bin/kubectl       https://storage.googleapis.com/kubernetes-release/release/v1.23.10/bin/linux/amd64/kubectl
  - wget -O /usr/bin/kubelet       https://storage.googleapis.com/kubernetes-release/release/v1.23.10/bin/linux/amd64/kubelet
  - wget -O /usr/bin/runc          https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
  - wget -O /tmp/cni.tar.gz        https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
  - wget -O /tmp/containerd.tar.gz https://github.com/containerd/containerd/releases/download/v1.6.2/containerd-1.6.2-linux-amd64.tar.gz
  - wget -O /tmp/crictl.tar.gz     https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.23.0/crictl-v1.23.0-linux-amd64.tar.gz
  # Раскидывание бинарей по диррректориям
  - chmod +x /usr/bin/kubelet /usr/bin/kubectl /usr/bin/runc /usr/bin/key-keeper
  - mkdir -p /opt/cni/bin
  - mkdir -p /tmp/containerd
  - tar -C "/tmp/containerd"  -xvf /tmp/containerd.tar.gz
  - tar -C "/opt/cni/bin"     -xvf /tmp/cni.tar.gz
  - tar -C "/usr/bin"         -xvf /tmp/crictl.tar.gz
  - cp /tmp/containerd/bin/*   /usr/bin/
  # Старт всех сервисов и автозапуск при старте системы
  - systemctl daemon-reload
  - systemctl enable kubelet.service
  - systemctl enable containerd.service
  - systemctl start kubelet.service
  - systemctl start containerd.service
  - systemctl enable  key-keeper.service
  - systemctl start   key-keeper.service

write_files:

  - path: /etc/kubernetes/pki/ca/kubernetes-ca.pem
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubernetes-ca-bundle)}


####### Настройка key-keeper ###########################
###--->
  - path: /etc/systemd/system/key-keeper.service
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, key-keeper-service)}

  - path: ${base_local_path_certs}/vault-config
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, key_keeper_config)}

  - path: /var/lib/key-keeper/bootstrap.token
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, bootstrap_token_all)}

####### Настройка kubelet ##############################
###--->
  - path: /etc/systemd/system/kubelet.service
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-service)}

  - path: ${base_path.kubernetes_path}/kubelet/service/kubelet-args.env
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-service-args)}

  - path: ${base_path.kubernetes_path}/kubelet/config.yaml
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-config)}

  - path: /etc/systemd/system/kubelet.service.d/10-fraima.conf
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, kubelet-service-d-fraima)}
###--->
####### *** ############################################

####### Настройка containerd ##############################
###--->
  - path: /etc/systemd/system/containerd.service
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, containerd-service )}
###--->
####### *** ############################################

####### Настройка cni ##############################
###--->
  - path: /etc/cni/net.d/99-loopback.conf
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, base-cni )}
###--->
####### *** ############################################

####### Настройка sysctl ##############################
###--->
  - path: /etc/sysctl.d/99-network.conf
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, sysctl-network )}
###--->
####### *** ############################################

####### Настройка modprobe ##############################
###--->
  - path: /etc/modules-load.d/k8s.conf
    owner: root:root
    permissions: '0644'
    content: |
      ${indent(6, modules-load-k8s )}
###--->
####### *** ############################################


####### KUBECONFIGS для подключения к кластеру

  - path: ${base_path.kubernetes_path}/kubelet/bootstrap-kubeconfig
    owner: root:root
    permissions: '0644'
    content: |
      ---
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: ${kubernetes-ca-bundle-b64}
          server: https://${kube_apiserver_lb_fqdn}:${kube-apiserver-port-lb}
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          namespace: default
          user: kubelet
        name: kubelet@kubernetes
      current-context: kubelet@kubernetes
      kind: Config
      preferences: {}
      users:
      - name: kubelet
        user:
          client-certificate: /etc/kubernetes/pki/certs/kubelet/bootstrappers-client.pem
          client-key: /etc/kubernetes/pki/certs/kubelet/bootstrappers-client-key.pem

####### Второстепенная настройка

  - path: /root/.bashrc
    owner: root:root
    permissions: '0644'
    content: |
      # .bashrc

      # User specific aliases and functions

      PROMPT_COMMAND='history -a'
      export HISTCONTROL="ignoreboth"
      export HISTIGNORE=""
      shopt -s cmdhist

      alias rm='rm -i'
      alias cp='cp -i'
      alias mv='mv -i'

      alias kg='kubectl get'
      alias ka='kubectl apply'
      alias kd='kubectl delete'
      alias ki='kubectl describe'
      alias ke='kubectl edit'
      alias k='kubectl '
      alias kl='kubectl logs '

      alias crictl='crictl  --runtime-endpoint unix:///run/containerd/containerd.sock '

      new_kubeconfig () {
        SRC_SSH_PORT=$(env | grep SSH_CONNECTION | awk '{print $2}')
        cp -uf ${base_path.kubernetes_path}/kube-apiserver/kubeconfig /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
      }
      new_kubeconfig

      kns () {
        kubectl config set-context --current --namespace=$1
      }

      # Source global definitions
      if [ -f /etc/bashrc ]; then
              . /etc/bashrc
      fi

